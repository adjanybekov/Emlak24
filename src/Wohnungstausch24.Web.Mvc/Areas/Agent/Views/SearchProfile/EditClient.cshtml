@using Wohnungstausch24.Models.Entites.SearchProfiles.Tenant
@using Wohnungstausch24.Models.Enums
@using Wohnungstausch24.Resources
@using Wohnungstausch24.Web.Mvc.Helpers
@model Wohnungstausch24.Models.ViewModels.ClientViewModel
@{
    ViewBag.Title = "AddNewClient";
    Layout = "~/Areas/Agent/Views/Shared/_Layout.cshtml";
}
<!-- BEGIN LISTING-->
<div class="site site--dashboard">
    <div class="site__main">
        <div class="widget js-widget widget--dashboard">
            <div class="widget__content">
                @using (Html.BeginForm("EditClient", "SearchProfile"))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(false, null, new { @class = "text-danger" })
                    <header class="form__header">
                        <h2 class="form__title js-form-title">AddNewClient</h2>
                        <a class="btn btn-xs btn-primary pull-right" href="#" data-toggle="modal" data-target="#addBalconyModal">@Resource.SearchPropfile_AddNewClient_EditDocuments<i class="fa fa-plus"></i></a>
                    </header>
                    <div class="form__block js-form-block">
                        <div class="row">
                            <div class="col-md-4">
                                @Html.LabelFor(m => m.Name, new { @class = "control-label" })
                                @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.Name, null, new { @class = "text-danger" })
                            </div>
                        </div>
                        <br />
                        <div class="row">
                            <div class="col-md-4">
                                @Html.LabelFor(m => m.Gender, new { @class = "control-label" })
                                @Html.EnumDropDownListFor(m => m.Gender, Resource.PleaseChoose, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.Gender, null, new { @class = "text-danger" })
                            </div>
                            <div class="col-md-4">
                                @Html.LabelFor(m => m.EmploymentStatus, new { @class = "control-label" })
                                @Html.EnumDropDownListFor(m => m.EmploymentStatus, Resource.PleaseChoose, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.EmploymentStatus, null, new { @class = "text-danger" })
                            </div>
                            <div class="col-md-4">
                                @Html.LabelFor(m => m.Profession, new { @class = "control-label" })
                                @Html.TextBoxFor(m => m.Profession, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.Profession, null, new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                @Html.LabelFor(m => m.Age, new { @class = "control-label" })
                                @Html.TextBoxFor(m => m.Age, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.Age, null, new { @class = "text-danger" })
                            </div>
                            <div class="col-md-4">
                                @Html.LabelFor(m => m.Income, new { @class = "control-label" })
                                @Html.TextBoxFor(m => m.Income, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.Income, null, new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                @Html.LabelFor(m => m.Headline, new { @class = "control-label" })
                                @Html.TextBoxFor(m => m.Headline, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.Headline, null, new { @class = "text-danger" })
                            </div>
                            </div>

                         <div class="row">
                             <div class="col-md-6">
                                 @Html.LabelFor(m => m.AboutMe, new { @class = "control-label" })
                                 @Html.TextAreaFor(m => m.AboutMe, new { @class = "form-control" })
                                 @Html.ValidationMessageFor(m => m.AboutMe, null, new { @class = "text-danger" })
                             </div>
                        </div>
                    </div>
                    @Html.HiddenFor(m => m.SearchProfileId)
                    @Html.HiddenFor(m => m.Id)
                    <input class="button__action" type="submit" value="@Resource.General_Submit" />
                }

                <!-- The blueimp Gallery widget -->
                <div id="blueimp-gallery" class="blueimp-gallery blueimp-gallery-controls" data-filter=":even">
                    <div class="slides"></div>
                    <h3 class="title"></h3>
                    <a class="prev">‹</a>
                    <a class="next">›</a>
                    <a class="close">×</a>
                    <a class="play-pause"></a>
                    <ol class="indicator"></ol>
                </div>
                <!-- The template to display files available for upload -->
                <script id="template-upload" type="text/x-tmpl">
                    {% for (var i=0, file; file=o.files[i]; i++) { %}
                    <tr class="template-upload fade">
                        <td>
                            <span class="preview"></span>
                        </td>
                        <td>
                            <p class="name">{%=file.name%}</p>
                            <strong class="error text-danger"></strong>
                        </td>
                        <td>
                            <p class="size">Processing...</p>
                            <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0"><div class="progress-bar progress-bar-success" style="width:0%;"></div></div>
                        </td>
                        <td>
                            {% if (!i && !o.options.autoUpload) { %}
                            <button class="btn btn-primary start" disabled>
                                <i class="glyphicon glyphicon-upload"></i>
                                <span>Start</span>
                            </button>
                            {% } %}
                            {% if (!i) { %}
                            <button class="btn btn-warning cancel">
                                <i class="glyphicon glyphicon-ban-circle"></i>
                                <span>Cancel</span>
                            </button>
                            {% } %}
                        </td>
                    </tr>
                    {% } %}
                </script>
                <!-- The template to display files available for download -->
                <script id="template-download" type="text/x-tmpl">
                    {% for (var i=0, file; file=o.files[i]; i++) { %}
                    <tr class="template-download fade">
                        <td>
                            <span class="preview">
                                {% if (file.thumbnailUrl) { %}
                                <a href="{%=file.url%}" title="{%=file.name%}" download="{%=file.name%}" data-gallery><img style="max-width: 120px!important" src="{%=file.thumbnailUrl%}"></a>
                                {% } %}
                            </span>
                        </td>

                        <td>
                            <div class="col-md-4">
                                <p class="name">
                                    <span>{%=file.docType%}</span>
                                </p>
                            </div>
                        </td>
                        <td>
                            {% if (file.deleteUrl) { %}
                            <button class="btn btn-danger delete" data-type="{%=file.deleteType%}" data-url="{%=file.deleteUrl%}" {% if (file.deleteWithCredentials) { %} data-xhr-fields='{"withCredentials":true}' {% } %}>
                                <i class="glyphicon glyphicon-trash"></i>
                                <span>@Resource.Delete</span>
                            </button>
                            {% } else { %}
                            <button class="btn btn-warning cancel">
                                <i class="glyphicon glyphicon-ban-circle"></i>
                                <span>Cancel</span>
                            </button>
                            {% } %}
                        </td>
                    </tr>
                    {% } %}
                </script>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="addBalconyModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
    <div class="modal-dialog" role="document">
        <div class="modal-content  modal-lg">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">@Resource.Add_Property_Balconies</h4>
            </div>
            <div class="modal-body">
                <div class="col-md-12">
                    <!-- The file upload form used as target for the file upload widget -->
                    <form id="fileupload" action="#" method="POST" enctype="multipart/form-data">
                        <!-- The fileupload-buttonbar contains buttons to add/delete files and start/cancel the upload -->
                        <div class="row fileupload-buttonbar">
                            <div class="col-lg-7">
                                @Html.LabelFor(m => m.ClientDocumentType, new { @class = "control-label" })
                                @Html.EnumDropDownListFor(m => m.ClientDocumentType, Resource.PleaseChoose,new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.ClientDocumentType, null, new { @class = "text-danger" })
                                <!-- The fileinput-button span is used to style the file input field as button -->
                                <span class="btn btn-success fileinput-button">
                                    <i class="glyphicon glyphicon-plus"></i>
                                    <span> @Resource.AddFiles </span>
                                    <input  id="addDoc" type="file" name="files[]" multiple>
                                </span>
                                <!-- The global file processing state -->
                                <span class="fileupload-process"></span>
                            </div>
                            <!-- The global progress state -->
                            <div class="col-lg-5 fileupload-progress fade">
                                <!-- The global progress bar -->
                                <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100">
                                    <div class="progress-bar progress-bar-success" style="width: 0%;"></div>
                                </div>
                                <!-- The extended global progress state -->
                                <div class="progress-extended">&nbsp;</div>
                                <div class="alert alert-danger">
                                    <p class="animated infinite flash">@Resource.Please_wait_while_your_files_are_being_processed</p>
                                </div>
                            </div>
                        </div>
                        <!-- The table listing the files available for upload/download -->
                        <table role="presentation" class="table table-striped table-responsive"><tbody class="files"></tbody></table>
                    </form>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">@Resource.General_Close</button>
            </div>
        </div>
    </div>
</div>


@section styles
{
    @BundlesHelper.Wt24Styles.JQueryFileUploadCss
    @BundlesHelper.Wt24Styles.JQueryFileUploadNoscriptCss
    <link href="~/Content/jQuery.FileUpload/css/jquery.fileupload-ui.css" rel="stylesheet" />
}

@section scripts
{
    @BundlesHelper.Wt24Scripts.JQueryFileUploadJs
    <script>
        'use strict';

        var url = '@Url.Action("UploadDocument", "File", new {id = Model.Id, docType = Model.ClientDocumentType, area = "Agent"})';

        $(function () {
            var selector = "@($"#{Html.IdFor(m => m.ClientDocumentType)}")";;
            var addDoc = "#addDoc";

            handleEnergyCertificate();
            var docType = 1;
            $(selector).on('change', handleEnergyCertificate);
            function handleEnergyCertificate() {
                $(addDoc).prop("disabled", true);
                var selected = $(selector).find(":selected");
                if (selected.val() === '@((int) ClientDocumentType.Einkommensnachweis)') {
                    docType = "@ClientDocumentType.Einkommensnachweis.ToString()";
                    $(addDoc).prop("disabled", false);
                } else if (selected.val() === '@((int) ClientDocumentType.Mietschuldenfreiheitsbescheinigung)') {
                    docType = "@ClientDocumentType.Mietschuldenfreiheitsbescheinigung.ToString()";
                    $(addDoc).prop("disabled", false);
                }else if (selected.val() === '@((int) ClientDocumentType.SchufaAuskuft)') {
                    docType = "@ClientDocumentType.SchufaAuskuft.ToString()";
                    $(addDoc).prop("disabled", false);
                }else if (selected.val() === '@((int) ClientDocumentType.Selbstauskunft)') {
                    docType = "@ClientDocumentType.Selbstauskunft.ToString()";
                    $(addDoc).prop("disabled", false);
                }
                url = replaceUrlParam(url, 'docType', docType);
            }
            function replaceUrlParam(url, paramName, paramValue) {
                if (paramValue == null)
                    paramValue = '';
                var pattern = new RegExp('\\b(' + paramName + '=).*?(&|$)')
                if (url.search(pattern) >= 0) {
                    return url.replace(pattern, '$1' + paramValue + '$2');
                }
                return url + (url.indexOf('?') > 0 ? '&' : '?') + paramName + '=' + paramValue
            }

            // Load existing files:
            $('#fileupload').addClass('fileupload-processing');

            $.ajax({
                    // Uncomment the following to send cross-domain cookies:
                    //xhrFields: {withCredentials: true},
                    url: '@Url.Action("GetExistingDocuments", "File", new {id = Model.Id, area = "Agent" })',
                    dataType: 'json',
                    context: $('#fileupload')[0]
                })
                .always(function() {
                    $(this).removeClass('fileupload-processing');
                })
                .done(function(result) {
                    $(this).fileupload('option', 'done').call(this, $.Event('done'), { result: result });
                });

            // Initialize the jQuery File Upload widget:
            $('#fileupload')
                .fileupload({
                    disableImageResize: false,
                    url: url,
                    autoUpload: true,
                    multipart: true,
                    sequentialUploads: true,
                    messages: {
                        maxNumberOfFiles: '@Resource.FileUpload_Maximum_number_of_files_exceeded',
                        acceptFileTypes: '@Resource.FileUpload_File_type_not_allowed',
                        maxFileSize: '@Resource.FileUpload_File_is_too_large',
                        minFileSize: '@Resource.FileUpload_File_is_too_small'
                    }
                }).bind('fileuploadadd', function (e, data) {
                    data.url = url;
                }).bind('fileuploaddone', function(e, data) {

                });

            // Enable iframe cross-domain access via redirect option:
            $('#fileupload')
                .fileupload(
                    'option',
                    'redirect',
                    window.location.href.replace(
                        /\/[^\/]*$/,
                        '/cors/result.html?%s'
                    )
                );
        });
    </script>
}

